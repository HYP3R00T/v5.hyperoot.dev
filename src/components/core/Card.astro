---
interface Props {
  url: string;
}

const { url } = Astro.props;

async function getMetadata(url: string) {
  try {
    const response = await fetch(url);
    const html = await response.text();

    // Extract title
    const titleMatch = html.match(/<title>(.*?)<\/title>/i);
    const title = titleMatch ? titleMatch[1] : "";

    // Extract meta description
    const descriptionMatch = html.match(
      /<meta[^>]*name="description"[^>]*content="([^"]*)"[^>]*>/i
    );
    const description = descriptionMatch ? descriptionMatch[1] : "";

    // Extract OG image
    const ogImageMatch = html.match(
      /<meta[^>]*property="og:image"[^>]*content="([^"]*)"[^>]*>/i
    );
    const image = ogImageMatch ? ogImageMatch[1] : "";

    return { title, description, image };
  } catch (error) {
    console.error("Error fetching metadata:", error);
    return { title: "", description: "", image: "" };
  }
}

const metadata = await getMetadata(url);
---

<a
  href={url}
  target="_blank"
  rel="noopener noreferrer"
  class="flex flex-row border-l-4 border-accent-primary rounded-radius my-4 p-0 bg-background-surface/3C0 hover:bg-background-surface/50 h-32 no-underline! overflow-hidden"
>
  <div class="flex flex-col justify-between px-4 py-2 flex-grow">
    <p class="text-text-base font-semibold truncate mb-0!">
      {metadata.title || url}
    </p>
    <p class="text-sm text-text-secondary whitespace-nowrap truncate my-0!">
      {url}
    </p>
  </div>

  {
    metadata.image && (
      <div class="hidden lg:flex flex-col overflow-hidden rounded-radius">
        <img
          src={metadata.image}
          alt={metadata.title}
          class="h-full w-full object-cover rounded-radius!"
          loading="lazy"
        />
      </div>
    )
  }
</a>
